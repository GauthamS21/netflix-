{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","handeleClick","movie","id","key","className","map","backdrop_path","src","poster_path","alt","name","onClick","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","console","log","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qUAOeA,E,OALEC,EAAMC,OAAO,CAC1BC,QAAS,iC,eCmEEC,MA9Df,YAA6C,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,WAAa,EACZC,mBAAS,IADG,mBACjCC,EADiC,KACzBC,EADyB,OAEJF,mBAAS,IAFL,mBAEjCG,EAFiC,KAErBC,EAFqB,KAe5CC,qBAAU,WAAM,4CAIhB,4BAAAC,EAAA,sEACsBb,EAAMc,IAAIT,GADhC,cACMU,EADN,OAEAN,EAAUM,EAAQC,KAAKC,SAFvB,kBAGOF,GAHP,4CAJgB,0DASfG,KACM,CAACb,IAEJ,IAAMc,EAAY,uCAAG,WAAOC,GAAP,iBAAAP,EAAA,0DACdH,EADc,gBAEbC,EAAc,IAFD,sCAIUX,EAAMc,IAAN,iBACTM,EAAMC,GADG,qDAJV,OAITX,EAJS,OAObC,EAAa,UAACD,EAAWM,KAAKC,QAAQ,UAAzB,aAAC,EAA4BK,KAP7B,2CAAH,sDAalB,OAEI,sBAAKC,UAAU,MAAf,UACI,6BAAKnB,IAEL,qBAAKmB,UAAU,cAAf,SAEKf,EAAOgB,KAAI,SAACJ,GAAD,OAAkC,OAAvBA,EAAMK,eAC7B,qBACAF,UAAS,qBAAiBjB,GAAc,oBACxCoB,IAAG,UApDH,uCAoDG,OAAgBpB,EAAYc,EAAMO,YAAaP,EAAMK,eACxDG,IAAKR,EAAMS,KAEXC,QAAS,kBAAMX,EAAaC,KADvBA,EAAMC,SAKhBX,GAAc,cAAC,IAAD,CAASqB,QAASrB,EAAYsB,KApDzC,CACVC,OAAQ,MACRC,MAAO,OACPC,WAAY,CACRC,SAAU,UCjBZC,EAAU,mCAaDC,EAVE,CACfC,cAAa,qCAAiCF,EAAjC,mBACbG,sBAAqB,+BAA2BH,EAA3B,sBACrBI,cAAa,mCAA+BJ,EAA/B,mBACbK,kBAAiB,kCAA8BL,EAA9B,oBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,kBAAkB,2BAAD,OAA6BP,EAA7B,mBACjBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,sBAClBS,mBAAmB,2BAAD,OAA6BT,EAA7B,oB,MC0CLU,MA/Cf,WAAmB,IAeGC,EAAKC,EAfT,EACU1C,mBAAU,IADpB,mBACPa,EADO,KACD8B,EADC,KAmBd,OAjBAtC,qBAAW,WAAM,4CACb,4BAAAC,EAAA,sEAC0Bb,EAAMc,IAAIwB,EAASE,uBAD7C,cACUzB,EADV,OAEImC,EAASnC,EAAQC,KAAKC,QAAQkC,KAAKC,MAAMD,KAAKE,SAAWtC,EAAQC,KAAKC,QAAQqC,OAAS,KAF3F,kBAIevC,GAJf,4CADa,uBAAC,WAAD,wBASbG,KACF,IACFqC,QAAQC,IAAIpC,GAOR,yBAASG,UAAU,SACnBkC,MAAO,CACHC,eAAiB,QACjBC,gBAAe,0DAA+CvC,QAA/C,IAA+CA,OAA/C,EAA+CA,EAAOK,cAAtD,MACfmC,mBAAqB,iBAJzB,UAQG,sBAAKrC,UAAU,mBAAf,UAEC,qBAAIA,UAAU,gBAAd,eAAsC,OAALH,QAAK,IAALA,OAAA,EAAAA,EAAOhB,SAAP,OAAgBgB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOS,QAAvB,OAA+BT,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOyC,kBAGvE,sBAAKtC,UAAY,iBAAjB,UACI,wBAAQA,UAAY,iBAApB,kBACA,wBAAQA,UAAY,iBAApB,wBAGJ,oBAAIA,UAAY,sBAAhB,UAvBUyB,EAwBG,OAAE5B,QAAF,IAAEA,OAAF,EAAEA,EAAO0C,SAxBPb,EAwBiB,KAvB1B,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKM,OAAOL,GAAID,EAAIe,OAAO,EAAGd,EAAE,GAAK,MAAQD,QA0BhD,qBAAKzB,UAAY,2B,MCddyC,MA/Bf,WAAgB,IAAD,EACczD,oBAAS,GADvB,mBACN0D,EADM,KACAC,EADA,KAeb,OAbAtD,qBAAU,WAQR,OAPAuD,OAAOC,iBAAiB,UAAU,WAC5BD,OAAOE,QAAU,IACnBH,GAAW,GAEXA,GAAW,MAGR,WACLC,OAAOG,oBAAoB,aAE5B,IAGD,sBAAK/C,UAAS,cAAS0C,GAAQ,cAA/B,UACE,qBACE1C,UAAU,YACVG,IAAI,mHACJE,IAAI,iBAEN,qBACEL,UAAU,cACVG,IAAI,+EACJE,IAAI,eCIG2C,MAzBf,WACE,OACE,sBAAKhD,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IAGF,cAAC,EAAD,CACEnB,MAAM,oBACNC,SAAUiC,EAASE,sBACnBlC,YAAY,IAEd,cAAC,EAAD,CAAKF,MAAM,eAAgBC,SAAUiC,EAASC,gBAC9C,cAAC,EAAD,CAAKnC,MAAM,YAAaC,SAAUiC,EAASG,gBAC3C,cAAC,EAAD,CAAKrC,MAAM,gBAAiBC,SAAUiC,EAASI,oBAC/C,cAAC,EAAD,CAAKtC,MAAM,gBAAgBC,SAAUiC,EAASK,oBAC9C,cAAC,EAAD,CAAKvC,MAAM,gBAAgBC,SAAUiC,EAASM,oBAC9C,cAAC,EAAD,CAAKxC,MAAM,iBAAiBC,SAAUiC,EAASO,qBAC9C,cAAC,EAAD,CAAKzC,MAAM,gBAAgBC,SAAUiC,EAASQ,yBCbpC0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dddb6768.chunk.js","sourcesContent":["import axios from \"axios\";\r\n/** base url to make request to the movie database */\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\" ,\r\n});\r\n\r\n\r\nexport default instance;","import React, { useState , useEffect } from 'react';\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport Youtube from \"react-youtube\";\r\n\r\nconst base_url= \"https://image.tmdb.org/t/p/original\";\r\n\r\nfunction Row({title, fetchUrl, isLargeRow}) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n // Options for react-youtube\r\n const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n        autoplay: 1,\r\n    },\r\n};\r\n    \r\n// ASnippet of code which runs based on a specific condition\r\n    \r\nuseEffect(() => { \r\n\r\n// if [], runs once when the row loads, and dont run again\r\n\r\nasync function fetchData() {\r\nconst request = await axios.get(fetchUrl);\r\nsetMovies(request.data.results);\r\nreturn request;\r\n }\r\n fetchData();\r\n    }, [fetchUrl] );\r\n\r\n    const handeleClick = async (movie) => {\r\n        if(trailerUrl) {\r\n            setTrailerUrl(\"\");\r\n        } else {\r\n            let trailerUrl = await axios.get(\r\n                `/movie/${movie.id}/videos?api_key=fb34530271b349314af0de263d16ab5a`\r\n            );\r\n            setTrailerUrl(trailerUrl.data.results[0]?.key);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row_posters\">\r\n            {/*several row posters*/}\r\n                {movies.map((movie) => movie.backdrop_path!== null && (\r\n                <img \r\n                className= {`row_poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                src={`${base_url}${isLargeRow? movie.poster_path: movie.backdrop_path}`}\r\n                alt={movie.name}\r\n                key={movie.id}\r\n                onClick={() => handeleClick(movie)}\r\n                />\r\n                ))}\r\n            </div>\r\n          {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"19db5a305d16e755d6f1312e32331ddc\";\r\n\r\n\r\nconst requests = {\r\n  fetchTrending : `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals : `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated : `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies : `/discover/movie?api_key=${API_KEY}&with_generes=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\nexport default requests;","import React, { useEffect, useState } from 'react'\r\nimport axios from './axios';\r\nimport requests from \"./request\";\r\nimport './Banner.css';\r\n\r\n\r\nfunction Banner() {\r\n    const [movie,setMovie] =useState ([]);\r\n    useEffect (() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(request.data.results[Math.floor(Math.random() * request.data.results.length - 1 )]\r\n        );\r\n                return request;\r\n            }\r\n            \r\n\r\n        fetchData();\r\n    },[]);\r\n    console.log(movie);\r\n    /* to maintain the overflow for the description we are using overflow function below*/\r\n    function truncate(str, n) {\r\n        return str?.length.n ? str.substr(0, n-1) + \"...\" : str;\r\n    }\r\n    \r\n    return (\r\n        <header  className=\"banner\" \r\n        style={{\r\n            backgroundSize : \"cover\",\r\n            backgroundImage : `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n            backgroundPosition : \"center center\",\r\n\r\n           \r\n        }}>\r\n           <div className=\"banner__contents\">\r\n            {/**title */}\r\n            <h1 className=\"banner__title\"> { movie?.title || movie?.name || movie?.original_name }\r\n            </h1>\r\n            {/** div > 2 buttons  */} \r\n            <div className = \"banner__button\">\r\n                <button className = \"banner__button\">Play</button>\r\n                <button className = \"banner__button\">My List</button> \r\n            </div>\r\n            {/** description */}\r\n            <h1 className = \"banner__description\">\r\n                {truncate (movie?.overview, 150)}\r\n            </h1>\r\n           </div>\r\n            <div className = \"banner__fadeBottom\"/>\r\n            </header>\r\n    )\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n  const [show, handleShow] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else {\r\n        handleShow(false);\r\n      }\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show && \"nav__black\"}`}>\r\n      <img\r\n        className=\"nav__logo\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n      <img\r\n        className=\"nav__avatar\"\r\n        src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\r\n        alt=\"Avatar\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./request\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner/>\n       \n    \n    <Row \n      title=\"Netflix Originals\" \n      fetchUrl={requests.fetchNetflixOriginals} \n      isLargeRow={true}\n    />\n    <Row title=\"Trending Now\"  fetchUrl={requests.fetchTrending} />\n    <Row title=\"Top Rated\"  fetchUrl={requests.fetchTopRated} />\n    <Row title=\"Action Movies\"  fetchUrl={requests.fetchActionMovies} />\n    <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n    <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n    <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n     <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    \n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}